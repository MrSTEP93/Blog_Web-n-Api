ЭТАП 4. Добавление API в проект
+Добавить новый проект с шаблоном веб-API ASP.NET CORE в решение
Добавить контроллеры для бизнес моделей (пользователь, статья и т.д.)
В контроллеры добавить основные операции с бизнес-моделями
При помощи DI внедрить в контроллеры соответствующие и уже реализованные ранее сервисы для работы с бизнес моделями (UserService, PostService и т.д.)
Добавить документацию API при помощи Swagger

https://localhost:44310/Article/Edit/12?returnUrl=%2FArticle%2FView%2F12
https://localhost:44310/Tag/Edit/14
https://localhost:44310/Profile?id=02f700ff-96f6-4bcd-b71b-33b7115d8ec4&returnUrl=%2FUser%2FInfo%2F02f700ff-96f6-4bcd-b71b-33b7115d8ec4
https://localhost:44310/Profile?id=78bbec8d-c695-4c76-9e8e-59c5847ca7e6&returnUrl=%2FUser%2FInfo%2F78bbec8d-c695-4c76-9e8e-59c5847ca7e6



ЭТАП 1
Распределите возможности администратора, модератора и пользователя в системе.

Например, администратор может удалить любого пользователя, а пользователь может редактировать только свои статьи.

У администратора есть полные права на любые операции с бизнес-моделями, у модератора — только права на операции редактирования статей и комментариев, у пользователя — только права на операции со своими созданными бизнес-моделями (статья, комментарий, тег).

Выполнить это можно при помощи клаймов.

Чек-лист для самопроверки
0 points possible (ungraded)

+Добавить в базу данных новую таблицу для сущности «Роль»
+Добавить в базу данных таблицу связей для сущностей «Пользователь» и его «Роль»
+Добавить в таблицу ролей роль администратора, роль модератора и роль пользователя
+Добавить в таблицу трех пользователей
+Для одного пользователя добавить роль администратора, для другого — роль модератора, для третьего — роль пользователя
+Добавить в проект новую бизнес-модель «Роль»
+Добавить в бизнес-модель пользователя список его ролей
+В контроллере аутентификации реализовать логику для аутентификации пользователей. 
Роли пользователя, успешно прошедшего аутентификацию, должны сохраниться в клаймах
+Заблокировать любой метод в любом контроллере атрибутом авторизации (только для администратора) и протестировать работоспособность


ЭТАП 2
+Подключить инструмент Bootstrap
+Сверстать меню
+Сверстать футер
+В меню добавить ссылки для возможности перехода на основные страницы приложения

+Добавить представление для просмотра, редактирования, добавления и удаления пользователя
+Добавить представление для просмотра, редактирования, добавления и удаления роли пользователя
+Добавить представление для просмотра, редактирования, добавления и удаления статьи
Добавить представление для просмотра, редактирования, добавления и удаления комментария
+Добавить представление для просмотра всех пользователей
+Добавить представление для просмотра всех ролей
+Добавить представление для просмотра всех статей
Добавить представление для просмотра всех комментариев
+Добавить представление для входа в приложение

Создать представление с ошибкой «Доступ запрещен»
Создать представление с ошибкой «Ресурс не найден»
Создать представление с текстом «Что-то пошло не так»

Добавить условия в представления для отображения контента в зависимости от того, вошел ли пользователь в систему и владеет ли он повышенными ролями


ЭТАП 3
+Во всех представлениях, требующих ввод данных от пользователя, добавить валидацию введенных значений

+Добавить логирование действий пользователя
+Добавить логирование ошибок в приложении
+Добавить описания методов контроллера

+Добавить глобальный обработчик исключений
+В случае непредвиденной ошибки добавить перенаправление на страницу с текстом «Что-то пошло не так»

Обработчики
https://habr.com/ru/articles/787674/
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-8.0
=================================
https://github.com/valmon55/Blog
https://github.com/sTorov/MyBlog
https://github.com/max-shelll/OwlBlog
